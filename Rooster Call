// Define a rooster
const Rooster = {};

// Return a morning rooster call
Rooster.announceDawn = () => {
  return 'cock-a-doodle-doo!';
};

// Return hour as string
// Throws Error if hour is not between 0 and 23 inclusive
Rooster.timeAtDawn = (hour) => {
  if (hour < 0 || hour > 23) {
    throw new RangeError('Hour must be between 0 and 23 inclusive.');
  }
  return hour.toString();
};

module.exports = Rooster;
// 1. Import assert
const assert = require('assert');

// 2. Import Rooster module
const Rooster = require('../index');

// 3. Describe block for Rooster
describe('Rooster', () => {

  // 4. Describe block for announceDawn
  describe('.announceDawn', () => {
    // 5. Test that it returns a rooster call
    it('returns a rooster call', () => {
      // Setup
      const expected = 'cock-a-doodle-doo!';
      // Exercise
      const actual = Rooster.announceDawn();
      // Verify
      assert.strictEqual(actual, expected);
    });
  });

  // 8. Describe block for timeAtDawn
  describe('.timeAtDawn', () => {
    // 9. Test that it returns its argument as a string
    it('returns its argument as a string', () => {
      // Setup
      const input = 12;
      const expected = '12';
      // Exercise
      const actual = Rooster.timeAtDawn(input);
      // Verify
      assert.strictEqual(actual, expected);
    });

    // 10. Test that it throws an error if number < 0
    it('throws an error if passed a number less than 0', () => {
      assert.throws(() => {
        Rooster.timeAtDawn(-1);
      }, RangeError);
    });

    // 11. Test that it throws an error if number > 23
    it('throws an error if passed a number greater than 23', () => {
      assert.throws(() => {
        Rooster.timeAtDawn(24);
      }, RangeError);
    });
  });
});
